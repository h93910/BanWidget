package com.example.banwidget.dataimport android.content.ComponentNameimport android.content.Contextimport android.content.Intentimport android.content.pm.PackageManagerimport android.graphics.Bitmapimport android.graphics.BitmapFactoryimport android.text.TextUtilsimport android.util.Logimport android.widget.Toastimport com.android.volley.Responseimport com.android.volley.VolleyErrorimport com.android.volley.toolbox.StringRequestimport com.bumptech.glide.Glideimport com.crossbow.volley.toolbox.Crossbowimport com.example.banwidget.MyAppWidgetProviderimport com.example.banwidget.Rimport com.example.banwidget.tool.DataToolimport com.example.banwidget.tool.FileHelperimport com.google.gson.Gsonimport com.google.gson.JsonArrayimport com.google.gson.JsonObjectimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.GlobalScopeimport kotlinx.coroutines.launchimport java.io.Fileimport java.io.FileOutputStreamimport java.io.IOExceptionimport java.text.DecimalFormatimport java.text.SimpleDateFormatimport java.util.*import java.util.concurrent.ExecutionException/** * Created by Ban on 2017/12/28. */class Weather_sojson(private val context: Context) {    companion object {        private const val TAG = "Weather_sojson"        private var city = "Shenzhen"        private var cityBackup = ""    }    private val iconPath = "/Ban/icon/"    private var apiKey: String? = null    private val dataTool: DataTool = DataTool(context, "date_weather")    private var weatherInfos: JsonArray? = null    private var icon = ""    private val simpleDateFormat = SimpleDateFormat("yyyy-MM-dd", Locale.CHINA)    private val info: Unit        get() {            val info = dataTool.text            if (TextUtils.isEmpty(info)) return            val gson = Gson()            val `object` = gson.fromJson(info, JsonObject::class.java)            if (`object`["city"] != null) {                //初始化的时候以备存的信息就是错的，用默认的深圳来替换                if (TextUtils.isEmpty(cityBackup)) {                    cityBackup = city                }                city = `object`["city"].asString            }            if (`object`["forecast"] != null) weatherInfos = `object`["forecast"].asJsonArray        }    fun getCity(): String {        info        return city    }    val weatherAndTemperatureString: String?        get() {            info            if (weatherInfos == null) {                jsonFromNet            } else {                return infoFromLocal            }            return null        }    /**     * 更新接口,原接口已经弃用     */    val jsonFromNet: Unit        get() {            if (apiKey == null) {                Log.e(TAG, "getJsonFromNet:api_key null")                return            }            val url = "http://api.openweathermap.org/data/2.5/forecast?q=$city&appid=$apiKey"            val request = StringRequest(url, Response.Listener { text: String -> getInfoFromNet(text) },                    Response.ErrorListener { obj: VolleyError ->                        Toast.makeText(context, context.getString(R.string.city_setting_fail_net),                                Toast.LENGTH_LONG).show()                        obj.printStackTrace()                    })            Crossbow.get(context).async(request)        }    /**     * from openweathermap     *     * @return     */    private val infoFromLocal: String        get() {            val nowData = simpleDateFormat.format(Date())            var min = 1000f //取到的值为开氏度            var max = 0f            //取当天最低最高温            for (i in 0 until weatherInfos!!.size()) {                val weatherInfo = weatherInfos!![i]                val `object` = weatherInfo.asJsonObject                val time = `object`["dt"].asInt                val infoData = simpleDateFormat.format(Date(time * 1000L))                if (infoData == nowData) {                    val main = `object`.getAsJsonObject("main")                    min = Math.min(min, main["temp_min"].asFloat)                    max = Math.max(max, main["temp_max"].asFloat)                }            }            if (max == 0f) return ""            val nowTime = System.currentTimeMillis() / 1000            val oneDay = 60 * 60 * 24            //以当前最近时间点的天气作为显示            for (i in 0 until weatherInfos!!.size()) {                val weatherInfo = weatherInfos!![i]                val `object` = weatherInfo.asJsonObject                val time = `object`["dt"].asInt                //因为数据是按升序来排的，所以直接取第一个就行                if (time - nowTime in 1 until oneDay) {                    val weather = `object`.getAsJsonArray("weather")[0].asJsonObject                    val description = weather["description"].asString                    icon = weather["icon"].asString                    val df = DecimalFormat("#.00")                    return """                        $city:$description                        ${df.format(min - 273.15f.toDouble())}~${df.format(max - 273.15f.toDouble())}°C                        """.trimIndent()                }            }            //本地文件已经无是过期的信息，直接消除            jsonFromNet            setCity(city)            return ""        }    // dayKey.append(context.getResources().getStringArray(R.array.week)[calendar.get(Calendar.DAY_OF_WEEK) - 1]);    @get:Deprecated("")    private val infoFromLocalSojson: String        get() {            val calendar = Calendar.getInstance(Locale.CHINA)            val key = String.format("%02d", calendar[Calendar.DAY_OF_MONTH])            // dayKey.append(context.getResources().getStringArray(R.array.week)[calendar.get(Calendar.DAY_OF_WEEK) - 1]);            var refresh = true            for (i in 0 until weatherInfos!!.size()) {                val weatherInfo = weatherInfos!![i]                val `object` = weatherInfo.asJsonObject                if (`object`["date"].asString == key) {                    val low = `object`["low"].asString.split(" ".toRegex()).toTypedArray()[1]                    val high = `object`["high"].asString.split(" ".toRegex()).toTypedArray()[1]                    return city + " " + `object`["type"].asString + " " + low + "至" + high                }                if (i > 0 && refresh) {                    refresh = false                    jsonFromNet                }            }            setCity(city)            return ""        }    /**     * 取城市代码     *     * @param cityCode     */    @Deprecated("")    private fun getCityInfoFromNet(cityCode: String) {        Log.d(TAG, "城市代码:$cityCode")        getCity()        val gson = Gson()        if (cityCode.isEmpty()) return        val url = "http://t.weather.sojson.com/api/weather/city/$cityCode"        Log.d(TAG, url)        val request = StringRequest(url, Response.Listener { text: String -> getInfoFromNet(text) }, Response.ErrorListener { error: VolleyError? -> })        Crossbow.get(context).async(request)//        getCity();//        Gson gson = new Gson();//        try {//            text = new String(text.getBytes("latin1"), "UTF-8");//            JsonArray array = gson.fromJson(text, JsonArray.class);//            String cityCode = "";//            for (int i = 0; i < array.size(); i++) {//                JsonObject jo = array.get(i).getAsJsonObject();//                if (jo.get("city_name").getAsString().equals(city)) {//                    cityCode = jo.get("city_code").getAsString();//                }//            }//            if (cityCode.isEmpty()) return;////            String url = "http://t.weather.sojson.com/api/weather/city/" + cityCode;//            Log.d(TAG, url);//            StringRequest request = new StringRequest(url, this::getInfoFromNet//                    , error -> {//                //Error handling//            });////            Crossbow.get(context).async(request);////        } catch (Exception e) {//            e.printStackTrace();//        }    }    private fun getInfoFromNet(text: String) {        Log.d(TAG, text)        val gson = Gson()        try {            val `object` = gson.fromJson(text, JsonObject::class.java)            if (`object`.getAsJsonArray("list") == null) return            weatherInfos = `object`.getAsJsonArray("list")            val saveDate = JsonObject()            saveDate.addProperty("city", city)            saveDate.add("forecast", weatherInfos)            dataTool.text = gson.toJson(saveDate)            downloadAllIcon()        } catch (e: Exception) {            Toast.makeText(context, context.getString(R.string.city_setting_fail_code),                    Toast.LENGTH_LONG).show()            e.printStackTrace()            rollbackCity()        }    }    /**     * 下载全部的天气图标     */    private fun downloadAllIcon() {        val icons = HashSet<String>()        for (i in 0 until weatherInfos!!.size()) {            val weatherInfo = weatherInfos!![i]            val `object` = weatherInfo.asJsonObject            val weather = `object`.getAsJsonArray("weather")[0].asJsonObject            icons.add(weather["icon"].asString)        }        val fileHelper = FileHelper.getInstance(context, iconPath)        GlobalScope.launch(Dispatchers.Default) {            for (s in icons) {                val fileName = "$s.png"                val downloadFile = File(fileHelper.getAbsoluteFilePath(fileName))                if (downloadFile.exists()) {                    continue                }                val url = "http://openweathermap.org/img/wn/$s@2x.png"                val bitmap = Glide.with(context).asBitmap().load(url).submit()                try {                    val b = bitmap.get()                    saveIcon(fileHelper, fileName, b)                } catch (e: ExecutionException) {                    e.printStackTrace()                } catch (e: InterruptedException) {                    e.printStackTrace()                }            }            callUpdateProvider()        }    }    @Deprecated("")    private fun getInfoFromNetSojson(text: String) {        Log.d(TAG, text)        val gson = Gson()        try {            val `object` = gson.fromJson(text, JsonObject::class.java)            if (`object`.getAsJsonObject("data") == null) return            weatherInfos = `object`.getAsJsonObject("data").getAsJsonArray("forecast")            val saveDate = JsonObject()            saveDate.addProperty("city", city)            saveDate.add("forecast", weatherInfos)            dataTool.text = gson.toJson(saveDate)            callUpdateProvider()        } catch (e: Exception) {            e.printStackTrace()        }    }    fun setCity(c: String) {        cityBackup = city        city = c        val gson = Gson()        val saveDate = JsonObject()        saveDate.addProperty("city", c)        dataTool.text = gson.toJson(saveDate)        callUpdateProvider()    }    private fun rollbackCity() {        if (!TextUtils.isEmpty(cityBackup)) {            Toast.makeText(context, context.getString(R.string.city_setting_fail, city, cityBackup),                    Toast.LENGTH_LONG).show()            city = cityBackup            cityBackup = ""            Log.v(TAG, "rollbackCity:$city")            jsonFromNet        }    }    private fun callUpdateProvider() {        val intent = Intent("com.stone.action.start")        intent.component = ComponentName(context, MyAppWidgetProvider::class.java) //api 8.0以上发给自己的必须写        context.sendBroadcast(intent)    }//    private val cityCode: String//        private get() {//            val am = context.resources.assets//            try {//                val `is` = am.open("CityCode.XLS")//                val mExcelWorkbook: Workbook = HSSFWorkbook(`is`) // 创建 Excel 2003 工作簿对象//                val s = mExcelWorkbook.getSheetAt(0) //选工作薄的第一个表//                //取列名//                val cellName = ArrayList<String>()//                val ci = s.getRow(0).cellIterator()//                while (ci.hasNext()) {//                    cellName.add(ci.next().stringCellValue)//                }//                //找城市id//                for (i in 0 until s.lastRowNum) {//                    val r = s.getRow(i)//                    for (j in 0 until s.getRow(0).lastCellNum) {//                        val type = r.getCell(j).cellTypeEnum//                        if (type == CellType.STRING) {//                            if ("ChinsesName" == cellName[j]) {//                                if (r.getCell(j).stringCellValue == city) {//                                    `is`.close()//                                    return r.getCell(cellName.indexOf("CityCode")).stringCellValue//                                }//                            }//                        }//                    }//                }//                `is`.close()//            } catch (e: IOException) {//                e.printStackTrace()//            }//            return ""//        }    /**     * 保存icon图片     *     * @param fh     * @param fileName     * @param bitmap     * @return     */    private fun saveIcon(fh: FileHelper, fileName: String, bitmap: Bitmap): Boolean {        Log.i(TAG, "将保存文件:$fileName")        val f = File(fh.getAbsoluteFilePath(fileName))        if (f.exists()) {            return true        }        try {            val out = FileOutputStream(f)            bitmap.compress(Bitmap.CompressFormat.PNG, 90, out)            out.flush()            out.close()            Log.i(TAG, "已经保存")            return true        } catch (e: IOException) {            e.printStackTrace()        }        return false    }    val weatherIcon: Bitmap?        get() {            val fh = FileHelper.getInstance(context, iconPath)            val f = File(fh.getAbsoluteFilePath("$icon.png"))            return if (f.exists()) {                BitmapFactory.decodeFile(f.absolutePath)            } else null        }    init {        try {            val appInfo = context.packageManager.getApplicationInfo(                    context.packageName, PackageManager.GET_META_DATA)            apiKey = appInfo.metaData.getString("openweathermap_appid")        } catch (e: PackageManager.NameNotFoundException) {            e.printStackTrace()        }        info    }}